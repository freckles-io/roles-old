- name: installing stow
  install:
    packages:
      - stow:
          conda_channels:
            - conda-forge
            - freckles
    pkg_mgr: "{{ pkg_mgr | default(omit) }}"
  # when: '"stow" in executables_missing and (not dotfiles_no_stow or dotfiles_unstow)'

- name: "[getting stow root stats]"
  stat:
    path: "{{ freckle_folder_metadata.stow_root }}"
  register: p

- name: "creating group '{{ freckle_folder_metadata.group }}'"
  group:
    name: "{{ freckle_folder_metadata.group }}"
    state: present
    gid: "{{ freckle_folder_metadata.gid | default(omit) }}"
  when: "'group' in freckle_folder_metadata.keys()"
  become: yes

# TODO: should we do this group assignment?
- name: "creating user '{{ freckle_folder_metadata.owner }}')"
  user:
    name: "{{ freckle_folder_metadata['owner'] }}"
    state: present
    group: "{{ freckle_folder_metadata.group | default(omit) }}"
    uid: "{{ freckle_folder_metadata.uid | default(omit) }}"
  when: "'owner' in freckle_folder_metadata.keys()"
  become: yes

- name: "ensuring stow target parent exists"
  file:
    path: "{{ freckle_folder_metadata.stow_root }}"
    recurse: true
    state: directory
    owner: "{{ freckle_folder_metadata.owner }}"
    group: "{{ freckle_folder_metadata.group | default(omit) }}"
  when: p.stat.isdir is not defined or not p.stat.isdir
  become: true

- name: "stowing freckle folders"
  stow:
    name: "{{ freckle_folder_path | basename }}"
    source_dir: "{{ freckle_folder_path | dirname }}"
    target_dir: "{{ freckle_folder_metadata.stow_root }}"
    delete_conflicts: False
  become: true
  #become_user: "{{ freckle_folder_metadata.stow_user | default(freckle_folder_metadata.owner) }}"
